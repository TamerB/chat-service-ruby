version: '2.2'
services:
  # master DB
  mysql_master:
    image: mysql:8.0
    env_file:
      - ./docker-compose/db/master/mysql_master.env
    container_name: "mysql_master"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    restart: "no"
    ports:
      - 3306:3306
    volumes:
      - ./docker-compose/db/master/conf/mysql.conf.cnf:/etc/mysql/conf.d/mysql.conf.cnf
      - ./docker-compose/db/master/data:/var/lib/mysql
    networks:
      - overlay

  # Slave DB
  mysql_slave:
    image: mysql:8.0
    env_file:
      - ./docker-compose/db/slave/mysql_slave.env
    container_name: "mysql_slave"
    restart: "no"
    ports:
      - 5506:3306
    depends_on:
      - mysql_master
    volumes:
      - ./docker-compose/db/slave/conf/mysql.conf.cnf:/etc/mysql/conf.d/mysql.conf.cnf
      - ./docker-compose/db/slave/data:/var/lib/mysql
    networks:
      - overlay

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.11.3-management
    container_name: 'rabbitmq'
    healthcheck:
      test: ["CMD", "echo" ,"0.0.0.0:15671"]
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - 5672:5672
      - 15671:15671
      - 15672:15672
      - 15691:15691
      - 15692:15692
      - 25672:25672
    networks:
      - rabbitmq_net

  #Elasticsearch
  elasticsearch:
    container_name: es-container
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.7
    healthcheck:
      test: ["CMD", "echo" ,"0.0.0.0:9200"]
    env_file:
      - ./docker-compose/es/es.env
    networks:
      - es_net
    ports:
      - 9200:9200
    mem_limit: 300m

  # Redis master
  redis-master:
    image: bitnami/redis:7.0.5
    container_name: "redis_master"
    healthcheck:
      test: ["CMD", "echo", "0.0.0.0:63779"]
      timeout: 20s
      retries: 10
    ports:
      - 6379:6379
    env_file:
      - ./docker-compose/redis/redis_master.env
    volumes:
      - ./docker-compose/redis/data:/bitnami
    networks:
      - redis_net

  # Redis replica
  redis-replica:
    image: bitnami/redis:7.0.5
    container_name: "redis_replica"
    ports:
      - 6379
    depends_on:
      - redis-master
    env_file:
      - ./docker-compose/redis/redis_replica.env
    networks:
      - redis_net
  webmaster:
    image: chat-master:latest
    container_name: 'web_master'
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0' -e production"
    env_file:
      - ./docker-compose/app/master.env
    ports:
      - 3000:3000
    networks:
      - rabbitmq_net
      - redis_net

  webwriter:
    image: chat-writer:latest
    container_name: 'web_writer'
    healthcheck:
      test: ["CMD", "curl" ,"http://0.0.0.0:3000/healthz"]
      interval: 5s
      timeout: 5s
      retries: 20
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql_master:
        condition: service_healthy
    command: bash -c "rm -f tmp/pids/server.pid && rake db:create && rake db:migrate && ./db_scheduler_events.sh && bundle exec rails s -p 3000 -b '0.0.0.0' -e production"
    env_file:
      - ./docker-compose/app/writer.env
    ports:
      - 3001:3000
    networks:
      - rabbitmq_net
      - overlay

  webreader:
    image: chat-reader:latest
    container_name: 'web_reader'
    healthcheck:
      test: ["CMD", "curl" ,"http://0.0.0.0:3000/healthz"]
      interval: 5s
      timeout: 5s
      retries: 20
    depends_on:
      rabbitmq:
        condition: service_healthy
      mysql_master:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      webwriter:
        condition: service_healthy
    command: bash -c "rm -f tmp/pids/server.pid && service cron restart && bundle exec rails s -p 3000 -b '0.0.0.0' -e production"
    env_file:
      - ./docker-compose/app/reader.env
    ports:
      - 3002:3000
    networks:
      - rabbitmq_net
      - overlay
      - es_net

networks:
  overlay:
  test_db_network:
  rabbitmq_net:
    driver: bridge
  es_net:
    driver: bridge
  redis_net:
    driver: bridge
